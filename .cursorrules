# Правила для генерации проекта UI-тестов на Java + Selenide

## Архитектура и Структура проекта

- **Технологический стек**: Используй Java 21, Selenide, JUnit 5 (Jupiter), Maven.
- **Паттерн Page Object Model (POM)**: Проект должен строго следовать трехслойной архитектуре POM:
    1.  **Слой Тестов (`/tests`)**: Классы, содержащие только тестовую логику и ассерты. Наследуются от `BaseTest`.
    2.  **Слой Страниц (`/pages`)**: Классы, описывающие страницы приложения (например, `LoginPage`, `IssuesPage`). Наследуются от `BasePage`. Они отвечают за взаимодействие с элементами и навигацию.
    3.  **Слой Компонентов (`/components`)**: Классы, описывающие переиспользуемые UI-элементы (например, `HeaderComponent`, `IssueRowComponent`). Наследуются от `BaseComponent`.
- **Взаимодействие слоев**:
    - Тесты вызывают методы Страниц.
    - Страницы вызывают методы Компонентов.
    - **Тесты НИКОГДА не должны обращаться к Компонентам или напрямую к элементам Selenide.**
- **Навигация**: Методы на страницах, которые приводят к переходу на другую страницу, должны возвращать объект этой новой страницы. Например, `loginPage.successLogin()` возвращает `new MainPage()`.
- **Структура пакетов**: Используй четкую структуру пакетов:
    - `ru.github.tests`: для тестовых классов.
    - `ru.github.pages`: для классов страниц.
    - `ru.github.components`: для переиспользуемых компонентов.
    - `ru.github.base`: для базовых классов (`BaseTest`, `BasePage`, `BaseComponent`).
    - `ru.github.services`: для сервисных классов (например, для работы с API).
    - `ru.github.utils`: для утилит, например, для логирования.
- **Базовые классы**:
    - `BaseTest`: Содержит общую для всех тестов настройку и завершение (`@BeforeEach`, `@AfterEach`), включая открытие браузера. Метод `open()` должен быть здесь.
    - `BasePage`: Может содержать общую для всех страниц логику.
    - `BaseComponent`: Базовый класс для всех компонентов.

## Стиль кода и Соглашения

- **Запрет на `Thread.sleep()`**: Категорически запрещено использовать `Thread.sleep()`. Вместо этого используй встроенные в Selenide динамические ожидания (`shouldBe`, `shouldHave`, `shouldNot`).
- **Локаторы**:
    - Все локаторы (`SelenideElement`) должны быть `private final` и объявляться в начале класса страницы или компонента.
    - Используй разнообразные стратегии поиска: `$(byText(""))`, `$(byName(""))`, `$(withId(""))`, `$(byXpath(""))`, `$(byCssSelector(""))`. Не ограничивайся только XPath.
- **Документация**:
    - Все `public` и `protected` классы и методы должны иметь Javadoc-комментарии (`/** ... */`).
- **Принцип "Один метод - одно действие"**:
    - Методы в классах страниц и компонентов должны выполнять одно логическое действие пользователя (например, `fillLogin(String login)`, `clickSubmitButton()`).
    - Не создавай методы, которые делают несколько действий сразу (например, `fillFormAndSubmit()`). Комбинирование действий происходит на уровне тестов.
- **Константы**:
    - Выноси все "магические" строки и числа (URL, тексты, названия меток, пути к файлам) в `private static final` константы.
- **Логирование**:
    - Интегрируй логирование (SLF4J + Logback).
    - Каждое действие в методах страниц и компонентов должно логироваться (например, `log.info("Клик по кнопке 'New Issue'")`).
- **Чистота кода**:
    - Длина строки не более 120 символов.
    - Методы разделяются одной пустой строкой.
    - Длина тела метода не должна превышать 20 строк.

## Реализация Тестов

- **Авторизация**: Метод `auth()` должен быть реализован для входа в систему. Он может быть в `BaseTest` или в отдельном сервисе. Он принимает логин/пароль и возвращает главную страницу. Вызывай его в начале каждого теста.
- **Данные**: Учетные данные (логин, пароль, имя репозитория) должны храниться в конфигурационном файле (например, `.properties`) и считываться оттуда, а не быть захардкожены в тестах.
- **Ассерты**: Используй ассерты из JUnit 5 (`Assertions`) или AssertJ для проверок. Все проверки должны находиться только в тестовых методах.
